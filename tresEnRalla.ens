TECLAT EQU 0B000h
PANTALLA EQU 0A000h
ORIGEN 100h
INICIO ini
.PILA 10h
.DATOS
wins VALOR 111000000b,000111000b,000000111b,100010001b,001010100b,001001001b,010010010b,100100100b
nom VALOR           " NOM JUGADOR   "
torn VALOR          " TORN JUGADOR  "
escriu VALOR        "Escriu         "
campio VALOR        "CAMPIO         "
tornarJugar VALOR   "TORNAR A JUGAR?"
win_txt VALOR       "CAMPIO JUGADOR "
fila4 VALOR 0,0,0
fila5 VALOR 0,0,0
fila6 VALOR 0,0,0
fila7 VALOR 0,0,0
adios VALOR         "Adios:         "

.CODIGO
ini:
	MOVH R3, BYTEALTO DIRECCION Clean_teclat_pantalla
	MOVL R3, BYTEBAJO DIRECCION Clean_teclat_pantalla
    CALL R3
	
	MOVH R3, BYTEALTO DIRECCION Pintar_tauler
	MOVL R3, BYTEBAJO DIRECCION Pintar_tauler
    CALL R3
	
	MOVH R3, BYTEALTO DIRECCION torn_jug1
	MOVL R3, BYTEBAJO DIRECCION torn_jug1
    CALL R3

    

    MOVH R3, BYTEALTO DIRECCION fi
	MOVL R3, BYTEBAJO DIRECCION fi
    CALL R3
    clean_teclat:
		PUSH R0
		PUSH R3
		
		MOVH R0, BYTEALTO TECLAT 
        MOVL R0, BYTEBAJO TECLAT
        ;Accedim al registre de control
        INC R0
        ;Apliquem el bit de esborrat
        MOVH R3, 0
        MOVL R3,00000100b
        MOV [R0],R3
		
		POP R3
		POP R0
    RET
    Clean_teclat_pantalla:
        PUSH R0
        PUSH R1
        PUSH R2
        PUSH R3
        ;guardem en un registre l'adreça base del dispositiu pantalla 
        MOVH R0, BYTEALTO PANTALLA 
        MOVL R0, BYTEBAJO PANTALLA
        ;Netegem la pantalla
        MOVL R1,120
        MOVH R1,00H
        ADD R1,R0,R1 ;R1 apunta al registre de control de la PANTALLA
        MOVL R2,00000011B;
        MOVH R2,00H
        MOV [R1],R2; Fiquem un 1 al primer bit del registre de control per esborrar la pantalla en cada inici
        
        ;Netejem el Teclado
        ;guardem en un registre l'adreça base del dispositiu pantalla 
        MOVH R0, BYTEALTO TECLAT 
        MOVL R0, BYTEBAJO TECLAT
        ;Accedim al registre de control
        INC R0
        ;Apliquem el bit de esborrat
        MOVH R3, 0
        MOVL R3,00000100b
        MOV [R0],R3

        POP R3
        POP R2
        POP R1
        POP R0
    RET

    Pintar_tauler:
        PUSH R0
        PUSH R2
        PUSH R3
        PUSH R4

        MOVH R4, 00h                  		
        MOVL R4, 10

        MOVH R0, BYTEALTO PANTALLA 
        MOVL R0, BYTEBAJO PANTALLA
        MOVH R3,  00h
        MOVL R3,  47                            	                                                       
        ADD R3, R0, R3        
        MOVH R2, 00000111b                     		
        MOVL R2, 43h                          		         
        MOV [R3], R2

        INC R3
        MOVH R2, 00000111b                     		
        MOVL R2, 4Fh                          		         
        MOV [R3], R2

        INC R3
        MOVH R2, 00000111b                     		
        MOVL R2, 4Ch                          		         
        MOV [R3], R2

        INC R3
        INC R3
        MOVH R2, 00000111b                     		
        MOVL R2, 31h                          		         
        MOV [R3], R2

        INC R3
        MOVH R2, 00000111b                     		
        MOVL R2, 32h                          		         
        MOV [R3], R2

        INC R3
        MOVH R2, 00000111b                     		
        MOVL R2, 33h                          		         
        MOV [R3], R2

        
        ADD R3,R4,R3
        MOVH R2, 00000111b                     		
        MOVL R2, 46h                          		         
        MOV [R3], R2

        INC R3
        INC R3
        MOVH R2, 00000111b                     		
        MOVL R2, 31h                          		         
        MOV [R3], R2

        CALL tres_blancs
       
        ADD R3,R4,R3
        MOVH R2, 00000111b                     		
        MOVL R2, 49h                          		         
        MOV [R3], R2

        INC R3
        INC R3
        MOVH R2, 00000111b                     		
        MOVL R2, 32h                          		         
        MOV [R3], R2

        CALL tres_blancs

        ADD R3, R4, R3
        MOVH R2, 00000111b                     		
        MOVL R2, 4Ch                          		         
        MOV [R3], R2

        INC R3
        INC R3
        MOVH R2, 00000111b                     		
        MOVL R2, 33h                          		         
        MOV [R3], R2

        CALL tres_blancs

        POP R4
        POP R3
        POP R2
        POP R0
    RET

    tres_blancs:
        INC R3
        MOVH R2, 00111111b                     		
        MOVL R2, 00h                          		         
        MOV [R3], R2

        INC R3
        MOVH R2, 00111111b                     		
        MOVL R2, 00h                          		         
        MOV [R3], R2

        INC R3
        MOVH R2, 00111111b                     		
        MOVL R2, 00h                          		         
        MOV [R3], R2
    RET

    
    torn_jug1:
        MOVH R0, BYTEALTO PANTALLA 
        MOVL R0, BYTEBAJO PANTALLA

        MOVH R1, 00h
        MOVL R1, 01h

        MOV R3, R0
        MOVH R4, BYTEALTO DIRECCION torn
        MOVL R4, BYTEBAJO DIRECCION torn

        MOVH R2, BYTEALTO DIRECCION print_line
        MOVL R2, BYTEBAJO DIRECCION print_line
        CALL R2

        DEC R3
        MOVH R2, 00000011b                     		
        MOVL R2, 31h                          		         
        MOV [R3], R2

        INC R3
        MOVH R4, BYTEALTO DIRECCION escriu
        MOVL R4, BYTEBAJO DIRECCION escriu

        MOVH R2, BYTEALTO DIRECCION print_line
        MOVL R2, BYTEBAJO DIRECCION print_line
        CALL R2
        
        XOR R2, R2, R2
        MOVL R2, 08h
        SUB R3, R3, R2

        MOVH R2, BYTEALTO DIRECCION print_FIL
        MOVL R2, BYTEBAJO DIRECCION print_FIL
        CALL R2

        

        MOVH R3, BYTEALTO DIRECCION wait_FIL
        MOVL R3, BYTEBAJO DIRECCION wait_FIL
        CALL R3

        MOVH R3, BYTEALTO DIRECCION print_COL
        MOVL R3, BYTEBAJO DIRECCION print_COL
        CALL R3

        MOVH R3, BYTEALTO DIRECCION wait_COL
        MOVL R3, BYTEBAJO DIRECCION wait_COL
        CALL R3

        MOVH R3, BYTEALTO DIRECCION check_pos
        MOVL R3, BYTEBAJO DIRECCION check_pos
        CALL R3

        MOVH R3, BYTEALTO DIRECCION tres_ratlla
        MOVL R3, BYTEBAJO DIRECCION tres_ratlla
        CALL R3

    RET
    
    torn_jug2:
        MOVH R1, 00h
        MOVL R1, 02h

        MOVH R0, BYTEALTO PANTALLA 
        MOVL R0, BYTEBAJO PANTALLA
        MOV R3, R0
        MOVH R4, BYTEALTO DIRECCION torn
        MOVL R4, BYTEBAJO DIRECCION torn

        MOVH R2, BYTEALTO DIRECCION print_line
        MOVL R2, BYTEBAJO DIRECCION print_line
        CALL R2

        DEC R3
        MOVH R2, 00000011b                     		
        MOVL R2, 32h                          		         
        MOV [R3], R2

        INC R3
        MOVH R4, BYTEALTO DIRECCION escriu
        MOVL R4, BYTEBAJO DIRECCION escriu

        MOVH R2, BYTEALTO DIRECCION print_line
        MOVL R2, BYTEBAJO DIRECCION print_line
        CALL R2
        
        XOR R2, R2, R2
        MOVL R2, 08h
        SUB R3, R3, R2

        MOVH R2, BYTEALTO DIRECCION print_FIL
        MOVL R2, BYTEBAJO DIRECCION print_FIL
        CALL R2

        

        MOVH R3, BYTEALTO DIRECCION wait_FIL
        MOVL R3, BYTEBAJO DIRECCION wait_FIL
        CALL R3

        MOVH R3, BYTEALTO DIRECCION print_COL
        MOVL R3, BYTEBAJO DIRECCION print_COL
        CALL R3

        MOVH R3, BYTEALTO DIRECCION wait_COL
        MOVL R3, BYTEBAJO DIRECCION wait_COL
        CALL R3

        MOVH R3, BYTEALTO DIRECCION check_pos
        MOVL R3, BYTEBAJO DIRECCION check_pos
        CALL R3

        MOVH R3, BYTEALTO DIRECCION tres_ratlla
        MOVL R3, BYTEBAJO DIRECCION tres_ratlla
        CALL R3
    RET
    
    print_FIL:
        PUSH R0
        PUSH R2
        MOVH R0, BYTEALTO PANTALLA 
        MOVL R0, BYTEBAJO PANTALLA

        XOR R3,R3,R3
        MOVL R3, 16h
        ADD R3,R0,R3

        MOVH R2, 00000011b                     		
        MOVL R2, 46h                          		         
        MOV [R3], R2
        INC R3

        MOVL R2, 49h                          		         
        MOV [R3], R2
        INC R3

        MOVL R2, 4Ch                          		         
        MOV [R3], R2
        INC R3

        MOVL R2, 3Ah                          		         
        MOV [R3], R2
        INC R3

        POP R2
        POP R0
    RET

    print_COL:
        PUSH R0
        PUSH R2
        MOVH R0, BYTEALTO PANTALLA 
        MOVL R0, BYTEBAJO PANTALLA

        XOR R3,R3,R3
        MOVL R3, 16h
        ADD R3,R0,R3

        MOVH R2, 00000011b                     		
        MOVL R2, 43h                          		         
        MOV [R3], R2
        INC R3

        MOVL R2, 4Fh                          		         
        MOV [R3], R2
        INC R3

        MOVL R2, 4Ch                          		         
        MOV [R3], R2
        INC R3

        POP R2
        POP R0
    RET
    
    print_line:
        PUSH R0
        PUSH R1
        PUSH R2
        PUSH R4
        
        XOR R0,R0,R0
        MOVL R0, 0Fh
        XOR R1,R1,R1
        print_char:
            MOV R2, [R4]   
            MOVH R2, 00000111b

            MOV [R3], R2
            INC R1
            INC R3
            INC R4
            COMP R0,R1
        BRNZ print_char

        POP R4
        POP R2
        POP R1
        POP R0
    RET

    fi:
        JMP -1
    RET
    
    wait_FIL:
        
        wait_tecla:; Aquest bucle comprova si s'ha pitjat una tecla
            MOVH R3, BYTEALTO DIRECCION clean_teclat
            MOVL R3, BYTEBAJO DIRECCION clean_teclat
            CALL R3
            
            MOVL R0, BYTEBAJO TECLAT        
            MOVH R0, BYTEALTO TECLAT
            INC R0
            
            MOVH R2,00000001b 			
            MOVL R2,00000000b

            no_tecla:
                MOV R4, [R0]
                MOVL R4, 00h
                COMP R4,R2; comprovem el bit 8 per veure si s'ha pitjat una tecla
            BRNZ no_tecla

            DEC R0
            MOV R3,[R0]				
            
            MOVH R2, 00h
            MOVH R3, 00h
            MOVL R2, 31h

            COMP R3,R2; 
            BRZ fil_is_one
            
            MOVL R2, 32h
            COMP R3,R2; 
            BRZ fil_is_two

            MOVL R2, 33h
            COMP R3,R2; 
            BRZ fil_is_three

            COMP R3,R2; 
            BRNZ wait_tecla
            
        
            fil_is_one:
                XOR R2,R2,R2
                MOVL R2, 01h
                RET
                
            
            fil_is_two:
                XOR R2,R2,R2
                MOVL R2, 02h
                RET
                
            
            fil_is_three:
                XOR R2,R2,R2
                MOVL R2, 03h
                RET
   

    wait_COL:
        wait_tecla2:
            PUSH R2

            MOVH R3, BYTEALTO DIRECCION clean_teclat
            MOVL R3, BYTEBAJO DIRECCION clean_teclat
            CALL R3
            INC R0
                
            MOVH R2,00000001b 			
            MOVL R2,00000000b

            no_tecla2:
                MOV R4, [R0]
                MOVL R4, 00h
                COMP R4,R2; comprovem el bit 8 per veure si s'ha pitjat una tecla
            BRNZ no_tecla2

            DEC R0
            MOV R3,[R0]				
            
            MOVH R4, 00h
            MOVH R3, 00h
            MOVL R4, 31h

            POP R2
            COMP R3,R4; 
            BRZ col_is_one
            
            MOVL R4, 32h
            COMP R3,R4; 
            BRZ col_is_two

            MOVL R4, 33h
            COMP R3,R4; 
            BRZ col_is_three

            COMP R3,R4; 
            BRNZ wait_tecla2

           

            col_is_one:
                XOR R4,R4,R4
                MOVL R4, 01h
                RET
                
            
            col_is_two:
                XOR R4,R4,R4
                MOVL R4, 02h
                RET
                
            
            col_is_three:
                XOR R4,R4,R4
                MOVL R4, 03h
                RET
    
    check_pos:
        PUSH R1
        PUSH R2
        PUSH R4
        PUSH R0
        

        DEC R2
        XOR R1,R1,R1
        MOVL R1, 03h
        XOR R0,R0,R0
        MUL:
            ADD R0, R2, R0
            DEC R1
        BRNZ MUL

        ADD R0, R0, R4
       
        DEC R0
        COMP R0, R1
        BRZ zero_pow
        MOVL R1, 01h

        POW:
            ADD R1, R1, R1
            DEC R0
        BRNZ POW
        
        XOR R0,R0,R0
        BRZ check
        zero_pow:
            INC R1
            BRNZ check

        check:
            OR R0,R5,R6
            AND R3,R0,R1
            POP R0
            POP R4
            POP R2
            AND R3,R3,R3
            BRZ skip
            
            PUSH R2
            XOR R2,R2,R2
            MOVL R2, 0Fh
            inf:
                DEC R2
            BRNZ inf
            POP R2
            POP R1
            PUSH R1
            MOVH R3, BYTEALTO DIRECCION print_FIL
            MOVL R3, BYTEBAJO DIRECCION print_FIL
            CALL R3

            MOVH R3, BYTEALTO DIRECCION wait_FIL
            MOVL R3, BYTEBAJO DIRECCION wait_FIL
            CALL R3

            MOVH R3, BYTEALTO DIRECCION print_COL
            MOVL R3, BYTEBAJO DIRECCION print_COL
            CALL R3

            MOVH R3, BYTEALTO DIRECCION wait_COL
            MOVL R3, BYTEBAJO DIRECCION wait_COL
            CALL R3
            
            
            XOR R0, R0, R0
            POP R1
            COMP R0,R0
            BRZ check_pos
                

            skip:
                MOV R3,R1
                

            POP R1
            PUSH R1
            PUSH R2
            PUSH R4
            
            XOR R4,R4,R4
            MOVL R4, 01h
            COMP R4,R1
            BRZ JUG_1
            OR R6,R6,R3
            COMP R6, R6
            BRZ refresh_pile
            JUG_1:
                OR R5,R5,R3

            refresh_pile:
                XOR R3,R3,R3

        print:
            MOVH R0, BYTEALTO PANTALLA 
            MOVL R0, BYTEBAJO PANTALLA

            POP R4
            POP R2

            XOR R1,R1,R1
            XOR R3,R3,R3
            DEC R2
            DEC R4
            
            MOVL R3, 15
            MUL2:
                ADD R1,R1,R2
                DEC R3
            BRNZ MUL2

            ADD R1, R4, R1
            MOVL R4, 66
            ADD R1, R1, R4

            ADD R0, R1, R0
            MOVH R3, 00111100b

            POP R1
            
            XOR R4, R4, R4
            INC R4
            COMP R4, R1
            BRZ print_X
            
            MOVL R3, 4Fh
            MOV [R0], R3
            RET
            print_X:
                MOVL R3, 58h
                MOV [R0], R3
                RET

    
    tres_ratlla:
        MOVH R3, 00h
        MOVL R3, 07h
        MOVH R0, BYTEALTO DIRECCION wins
        MOVL R0, BYTEBAJO DIRECCION wins

        ADD R0, R3, R0
        
        

        check_win:
            MOV R2, [R0]
            PUSH R1
            AND R1, R5, R2

            COMP R1,R2
            BRZ win
            
            POP R1
            DEC R0    
            DEC R3
        BRNS check_win

        MOVH R3, 00h
        MOVL R3, 07h
        INC R0
        ADD R0, R0, R3

        check_win2:
            MOV R2, [R0]
            PUSH R1
            AND R1, R6, R2
            COMP R1,R2
            BRZ win
            POP R1
            DEC R0    
            DEC R3
        BRNS check_win2

        OR R2, R5, R6
        
        MOVL R3, 0FFh
        MOVH R3, 01h
        COMP  R2, R3
        BRZ draw
        
        MOVH R2, 00h
        MOVL R2, 01h
        COMP  R2, R1
        BRNZ t_one
        MOVH R3, BYTEALTO DIRECCION torn_jug2
        MOVL R3, BYTEBAJO DIRECCION torn_jug2
        CALL R3

        t_one:
            MOVH R3, BYTEALTO DIRECCION torn_jug1
            MOVL R3, BYTEBAJO DIRECCION torn_jug1
            CALL R3

        draw:
            MOVH R3, BYTEALTO DIRECCION fi
            MOVL R3, BYTEBAJO DIRECCION fi
            CALL R3

        win:
            POP R1

            MOVH R3, BYTEALTO DIRECCION Clean_teclat_pantalla
            MOVL R3, BYTEBAJO DIRECCION Clean_teclat_pantalla
            CALL R3

            MOVH R3, BYTEALTO PANTALLA
            MOVL R3, BYTEBAJO PANTALLA

            MOVH R2, 00h
            MOVL R2, 1Eh

            ADD R3, R3, R2

            MOVH R4, BYTEALTO DIRECCION win_txt
            MOVL R4, BYTEBAJO DIRECCION win_txt

            MOVH R2, BYTEALTO DIRECCION print_line
            MOVL R2, BYTEBAJO DIRECCION print_line
            CALL R2

            DEC R3
            
            MOVL R2, 30h
            ADD R2, R1, R2
            MOVH R2, 00000011b

            MOV [R3], R2
    RET
FIN
    



